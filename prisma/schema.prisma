// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROOT_ADMIN
  SUPER_ADMIN
  REGIONAL_ADMIN
  LOCAL_ADMIN
  USER
}

model User {
  id            String    @id @default(uuid())
  auth_id       String    @unique // Links to Supabase Auth
  email         String    @unique
  firstName     String?
  lastName      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginTime DateTime?

  // User progress tracking
  videoProgress    VideoProgress[]
  questionProgress QuestionProgress[]
  unitProgress     UnitProgress[]

  // Group relationships
  groupId     String?
  group       Group?    @relation(fields: [groupId], references: [id])
  
  // Management relationships
  managedGroups    Group[]   @relation("GroupManagers")
  managedRegions   Region[]  @relation("RegionManagers")
  managedDioceses  Diocese[] @relation("DioceseManagers")
}

model Group {
  id        String   @id @default(uuid())
  name      String
  regionId  String
  region    Region   @relation(fields: [regionId], references: [id])
  users     User[]
  managers  User[]   @relation("GroupManagers")
}

model Region {
  id        String   @id @default(uuid())
  name      String
  dioceseId String
  diocese   Diocese  @relation(fields: [dioceseId], references: [id])
  groups    Group[]
  managers  User[]   @relation("RegionManagers")
}

model Diocese {
  id        String   @id @default(uuid())
  name      String
  regions   Region[]
  managers  User[]   @relation("DioceseManagers")
}

// Progress tracking models
model VideoProgress {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  unitId      String   // ID from your hardcoded course data
  currentTime Float    // Current position in the video (seconds)
  duration    Float    // Total video duration (seconds)
  completed   Boolean  @default(false)
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@unique([userId, unitId])
}

model QuestionProgress {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  questionId  String   // ID from your hardcoded course data
  unitId      String   // ID from your hardcoded course data
  attempts    Int      @default(0)
  correct     Boolean  @default(false)
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@unique([userId, questionId])
}

model UnitProgress {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  unitId            String   // ID from your hardcoded course data
  videoCompleted    Boolean  @default(false)
  questionsCompleted Int      @default(0)
  totalQuestions    Int      @default(5) // Always 5 questions per unit
  lastUpdated       DateTime @updatedAt
  createdAt         DateTime @default(now())

  @@unique([userId, unitId])
}


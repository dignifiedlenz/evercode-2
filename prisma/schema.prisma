datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
  firstName  String?
  lastName   String?
  lastCompletedSession     Int     @default(0)
  notes  Note?
  // Add any extra fields you want (e.g. name, createdAt, etc.)
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String   // JSON string representing Slate's Descendant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model Semester {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  // Relation to chapters
  chapters Chapter[]
}

// A chapter belongs to exactly one Semester
model Chapter {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  // Link back to Semester
  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String   @db.ObjectId
  // Each chapter can have multiple videos
  videos     Video[]
}

// A video belongs to exactly one Chapter
model Video {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  videoUrl  String
  // Link back to Chapter
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String  @db.ObjectId
  // One-to-many with questions
  questions Question[]
}

// A question belongs to exactly one Video
model Question {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  question String
  // For simplicity, store options & correctAnswer as JSON or separate table
  options        String[]  // Example array of strings
  correctAnswer  String
  // Link back to Video
  video    Video   @relation(fields: [videoId], references: [id])
  videoId  String  @db.ObjectId
}

